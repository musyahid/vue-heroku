{"remainingRequest":"/home/musyahid/bootcamp/vue js/vue-heroku/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/home/musyahid/bootcamp/vue js/vue-heroku/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/musyahid/bootcamp/vue js/vue-heroku/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/musyahid/bootcamp/vue js/vue-heroku/src/components/Navigation.vue?vue&type=template&id=81440b78&","dependencies":[{"path":"/home/musyahid/bootcamp/vue js/vue-heroku/src/components/Navigation.vue","mtime":1600609670434},{"path":"/home/musyahid/bootcamp/vue js/vue-heroku/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/musyahid/bootcamp/vue js/vue-heroku/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/musyahid/bootcamp/vue js/vue-heroku/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/musyahid/bootcamp/vue js/vue-heroku/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}